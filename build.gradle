def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.fluttergooglemapsapp"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}






/*
apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: '../shared_dependencies.gradle'
apply from: '../test_dependencies.gradle'

repositories {
    google()
    jcenter()
   // mavenCentral()
   // maven { url "https://dl.bintray.com/android/android-tools"}
}
//maven {url 'https://dl.bintray.com/android/android-tools'}

buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        google()
        maven {
            url 'https://jitpack.io'
        }
        jcenter()

    }

   // dependencies {
        //classpath 'com.github.colinrtwhite:google-services:9da6686'
        // classpath 'com.google.gms: google-services: 4.3.2'
      //  classpath 'com.android.tools.build:gradle:3.5.3'
        //classpath 'com.android.tools.build:gradle:4.2.0'
    /*    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
      */  //classpath 'io.fabric.tools:gradle:1.27.0'
   /*     classpath 'com.android.tools.build:gradle:3.5.3'
    }
}

ext { */
    // query git for the commit count to automate versioning.
 /*   gitCommitCount = 100 +
            Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())
}

allprojects {
    repositories {
        google()
        jcenter()
*/
       // maven {
        //    url 'https://maven.google.com/'
        //}
 /*   }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

*/

